parameters:
  - name: variables
    type: object
    default: {}
  - name: pool
    type: string
  - name: environment
    type: string
    values:
      - "Development"
      - "Staging"
      - "Production"
  - name: shortEnv
    type: string
    values:
      - "dev"
      - "hml"
      - "prd"
  - name: dependsOn
    type: string
  - name: serviceName
    type: string
  - name: subscription
    type: string
  - name: terraformFilesPath
    type: string
  - name: packageDirectory
    type: string

stages:
  - stage: ${{ parameters.environment }}
    displayName: ${{ parameters.environment }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: succeeded()
    pool: ${{ parameters.pool }}

    jobs:
      - job: Deployment
        displayName: Release ${{ parameters.environment }}
        variables: ${{ parameters.variables }}
        steps:
          - download: current
            displayName: "Download build artifacts"
            artifact: drop

          - task: ExtractFiles@1
            displayName: "Extract files"
            inputs:
              archiveFilePatterns: "$(Pipeline.Workspace)/drop/${{ parameters.terraformFilesPath }}"
              destinationFolder: "$(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}"

          - task: replacetokens@3
            displayName: "Replace tokens in Terraform Files"
            env:
              - ShortEnv: ${{ parameters.shortEnv }}
              - ServiceName: ${{ parameters.serviceName }}
            inputs:
              rootDirectory: "$(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}"
              actionOnMissing: fail
              targetFiles: |
                **/*.tf
                **/*.tfvars
                **/*.conf

          - task: TerraformInstaller@1
            displayName: Install Terraform
            inputs:
              terraformVersion: "1.5.2"

          - script: |
              terraform init -no-color -input=false --backend-config=tf-backend.conf
            displayName: "Terraform Init"
            workingDirectory: $(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}

          - task: TerraformTaskV4@4
            displayName: Terraform Plan
            inputs:
              command: plan
              commandOptions: -out ${{ parameters.serviceName }}-${{ parameters.shortEnv }}-plan -var-file terraform-shared.tfvars -var-file terraform-${{ parameters.shortEnv }}.tfvars
              workingDirectory: $(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}

          - task: TerraformTaskV4@4
            displayName: Terraform Plan
            inputs:
              command: apply
              commandOptions: ${{ parameters.serviceName }}-${{ parameters.shortEnv }}-plan
              workingDirectory: $(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: AzureRM
              azureSubscription: ${{ parameters.subscription }}
              appType: "webAppLinux"
              DeploymentType: zipDeploy
              WebAppName: ${{ parameters.serviceName }}-${{ parameters.shortEnv }}
              packageForLinux: ${{ parameters.packageDirectory }}
