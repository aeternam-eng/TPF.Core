parameters:
  - name: pool
    type: string
  - name: environment
    type: string
    values:
      - "Development"
      - "Staging"
      - "Production"
  - name: shortEnv
    type: string
    values:
      - "dev"
      - "hml"
      - "prd"
  - name: dependsOn
    type: string
  - name: variables
    type: object
    default: {}
  - name: serviceName
    type: string
  - name: subscription
    type: string
  - name: terraformFilesPath
    type: string

stages:
  - stage: ${{ parameters.environment }}
    displayName: ${{ parameters.environment }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: succeeded()
    pool: ${{ parameters.pool }}

    jobs:
      - deployment: Release_${{ parameters.environment }}
        displayName: Release ${{ parameters.environment }}
        environment: ${{ parameters.environment }}
        variables: ${{ parameters.variables }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  displayName: "Download build artifacts"
                  artifact: drop

                - task: ExtractFiles@1
                  displayName: "Extract files"
                  inputs:
                    archiveFilePatterns: "$(Pipeline.Workspace)/drop/${{ parameters.terraformFilesPath }}"
                    destinationFolder: "$(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}"

                - task: TerraformInstaller@1
                  displayName: Install Terraform
                  inputs:
                    terraformVersion: "1.5.2"

                - task: TerraformTaskV4@4
                  displayName: Terraform Init
                  inputs:
                    command: init
                    backendServiceArm: $(subscription)
                    backendAzureRmStorageAccountName: "sa-stronzo-iac"
                    backendAzureRmContainerName: "tfstates"
                    backendAzureRmKey: ${{ parameters.shortEnv }}${{ parameters.serviceName }}.tfstate
                    workingDirectory: $(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}

                - task: TerraformTaskV4@4
                  displayName: Terraform Plan
                  inputs:
                    command: plan
                    commandOptions: -out ${{ parameters.serviceName }}-${{ parameters.shortEnv }}-plan -var-file terraform-shared.tfvars -var-file terraform-${{ parameters.shortEnv }}.tfvars
                    workingDirectory: $(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}

                - task: TerraformTaskV4@4
                  displayName: Terraform Plan
                  inputs:
                    command: apply
                    commandOptions: ${{ parameters.serviceName }}-${{ parameters.shortEnv }}-plan
                    workingDirectory: $(Pipeline.Workspace)/drop/${{ parameters.shortEnv }}

                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: AzureRM
                    azureSubscription: $(subscription)
                    appType: "webAppLinux"
                    DeploymentType: zipDeploy
                    WebAppName: "stronzo-tapegandofogo-core-dev"
                    packageForLinux: "$(downloadedPackageDirectory)"
